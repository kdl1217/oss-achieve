plugins {
    id 'java'
    id 'io.freefair.lombok' version '5.2.1' apply false
    id 'org.springframework.boot' version '2.4.2' apply false
}

group 'org.kon'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.freefair.lombok'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
    maven {
        url "https://maven.aliyun.com/repository/public"
    }
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.30"

    implementation 'com.aliyun.oss:aliyun-sdk-oss:3.14.0'

    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.2'

    testImplementation ("org.springframework.boot:spring-boot-starter-test:2.4.2") {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked"
}

test {
    useJUnitPlatform()
}

task checkstyle(type: Checkstyle) {
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures true
    showViolations true
    source = fileTree("src")
    include "**/*.java"
    exclude "**/test/**"
    exclude "**/build/**"
    classpath = files()
}

task removeLombokConfig() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        def lombokConfigFile = new File(subProjectPath, "lombok.config")
        if (lombokConfigFile.exists()) {
            lombokConfigFile.delete()
        }
    }
}

task removeOutputLog() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        def logPath = new File(subProjectPath, "output.log")
        if (logPath.exists()) {
            logPath.delete()
        }
    }
}

jar {
    exclude("**/application-*.yml")
}

defaultTasks "assemble"